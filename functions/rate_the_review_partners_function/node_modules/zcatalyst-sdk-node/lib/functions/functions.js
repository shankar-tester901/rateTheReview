'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var isValidApp = require('../utils/validator').isValidApp;
var isStringOrNumber = require('../utils/validator').isStringOrNumber;
var isNonEmptyObject = require('../utils/validator').isNonEmptyObject;
var wrapValidatorsWithPromise = require('../utils/validator').wrapValidatorsWithPromise;
var CatalystAppInternals = require('../catalyst-app').CatalystAppInternals;
var AuthorizedHttpClient = require('../utils/api-request').AuthorizedHttpClient;
var API_VERSION = require('../utils/constants').API_VERSION;
var PRODUCT_NAME = require('../utils/constants').PRODUCT_NAME;
var CatalystFunctionsError = require('../utils/error').CatalystFunctionsError;
var Functions = /** @class */ (function (_super) {
    __extends(Functions, _super);
    function Functions(app) {
        var _this = this;
        isValidApp(app, true);
        _this = _super.call(this, app.internal) || this;
        // super.switchUser(USER.admin);
        _this.requester = new AuthorizedHttpClient(_this);
        return _this;
    }
    Functions.prototype.execute = function (id, _a) {
        var _this = this;
        var _b = _a === void 0 ? {} : _a, _c = _b.args, args = _c === void 0 ? {} : _c, _d = _b.method, method = _d === void 0 ? 'GET' : _d, data = _b.data;
        return wrapValidatorsWithPromise(function () {
            isStringOrNumber(id, 'function_id|functions_name', true);
        }, CatalystFunctionsError).then(function () {
            var functionData = {};
            if (isNonEmptyObject(args)) {
                functionData = args;
            }
            else if (isNonEmptyObject(data)) {
                functionData = data;
            }
            var request = {
                method: method,
                path: "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + _this.projectId + "/function/" + id + "/execute"
            };
            if (method === 'GET') {
                request.qs = functionData;
            }
            else {
                request.data = functionData;
                request.type = 'json';
            }
            return _this.requester.send(request).then(function (resp) {
                return resp.data.data === undefined ? resp.data.output : resp.data.data;
            });
        });
    };
    return Functions;
}(CatalystAppInternals));
exports.Functions = Functions;
