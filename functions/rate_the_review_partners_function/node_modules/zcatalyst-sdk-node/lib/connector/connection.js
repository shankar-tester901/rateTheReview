'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var connectorJson = require('./connectorValidator').getConnectorJson;
var Connector = require('./connector').Connector;
var isValidApp = require('../utils/validator').isValidApp;
var isNonNullObject = require('../utils/validator').isNonNullObject;
var validateObject = require('../utils/validator').validateObject;
var CatalystAppInternals = require('../catalyst-app').CatalystAppInternals;
var HttpClient = require('../utils/api-request').HttpClient;
var CatalystConnectorError = require('../utils/error').CatalystConnectorError;
var constants = require('../utils/constants');
var Connection = /** @class */ (function (_super) {
    __extends(Connection, _super);
    function Connection(app, propJson) {
        var _this = this;
        isValidApp(app, true);
        _this = _super.call(this, app.internal) || this;
        _super.prototype.switchUser.call(_this, constants.CREDENTIAL_USER.admin);
        _this.connectionJson = connectorJson(propJson);
        _this.app = app;
        _this.requester = new HttpClient(_this);
        return _this;
    }
    Connection.prototype.getConnector = function (connectorName) {
        var _a;
        if (this.connectionJson === null) {
            throw new CatalystConnectorError('invalid_input', 'the input passed to connector must be a valid json object or a string path to json file', this.connectionJson);
        }
        var connector = this.connectionJson[connectorName];
        isNonNullObject(connector, 'connector.' + connectorName, true);
        validateObject(connector, [
            constants.CLIENT_ID,
            constants.CLIENT_SECRET,
            constants.AUTH_URL,
            constants.REFRESH_URL
        ], 'connector.' + connectorName, true);
        return new Connector(Object.assign((_a = {}, _a[constants.CONNECTOR_NAME] = connectorName, _a), connector), this);
    };
    return Connection;
}(CatalystAppInternals));
exports.Connection = Connection;
