'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var isValidApp = require('../utils/validator').isValidApp;
var isNonNullObject = require('../utils/validator').isNonNullObject;
var wrapValidatorsWithPromise = require('../utils/validator').wrapValidatorsWithPromise;
var validate = require('./emailValidator').validate;
var CatalystAppInternals = require('../catalyst-app').CatalystAppInternals;
var AuthorizedHttpClient = require('../utils/api-request').AuthorizedHttpClient;
var API_VERSION = require('../utils/constants').API_VERSION;
var PRODUCT_NAME = require('../utils/constants').PRODUCT_NAME;
var USER = require('../utils/constants').CREDENTIAL_USER;
var CatalystEmailError = require('../utils/error').CatalystEmailError;
var Email = /** @class */ (function (_super) {
    __extends(Email, _super);
    function Email(app) {
        var _this = this;
        isValidApp(app, true);
        _this = _super.call(this, app.internal) || this;
        _super.prototype.switchUser.call(_this, USER.admin);
        _this.requester = new AuthorizedHttpClient(_this);
        return _this;
    }
    Email.prototype.sendMail = function (mailObj) {
        var _this = this;
        return wrapValidatorsWithPromise(function () {
            isNonNullObject(mailObj, 'email_object', true);
        }, CatalystEmailError).then(function () {
            return validate(mailObj).then(function (validMailObj) {
                var request = {
                    method: 'POST',
                    path: "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + _this.projectId + "/email/send",
                    data: validMailObj,
                    type: 'json'
                };
                return _this.requester.send(request).then(function (resp) {
                    return resp.data.data;
                });
            });
        });
    };
    return Email;
}(CatalystAppInternals));
exports.Email = Email;
