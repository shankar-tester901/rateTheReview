'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var isNonEmptyString = require('../utils/validator').isNonEmptyString;
var wrapValidatorsWithPromise = require('../utils/validator').wrapValidatorsWithPromise;
var CatalystAppInternals = require('../catalyst-app').CatalystAppInternals;
var CatalystCacheError = require('../utils/error').CatalystCacheError;
var PRODUCT_NAME = require('../utils/constants').PRODUCT_NAME;
var API_VERSION = require('../utils/constants').API_VERSION;
var Segment = /** @class */ (function (_super) {
    __extends(Segment, _super);
    function Segment(segmentDetails, cacheInstance) {
        var _this = _super.call(this, cacheInstance) || this;
        _this._segmentDetails = segmentDetails;
        _this.requester = cacheInstance.requester;
        return _this;
    }
    Segment.prototype.put = function (key, value, expiry) {
        var _this = this;
        return wrapValidatorsWithPromise(function () {
            isNonEmptyString(value, 'cache_value', true);
            isNonEmptyString(key, 'cache_key', true);
        }, CatalystCacheError).then(function () {
            var apiUrl = "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + _this.projectId +
                (_this._segmentDetails.id === 'default'
                    ? '/cache'
                    : "/segment/" + _this._segmentDetails.id + "/cache");
            var postData = {
                cache_name: key,
                cache_value: value,
                expiry_in_hours: expiry ? expiry : null
            };
            var request = {
                method: 'POST',
                type: 'json',
                data: postData,
                path: apiUrl
            };
            return _this.requester.send(request).then(function (resp) {
                var json = resp.data;
                return json.data;
            });
        });
    };
    Segment.prototype.update = function (key, value, expiry) {
        var _this = this;
        return wrapValidatorsWithPromise(function () {
            isNonEmptyString(value, 'cache_value', true);
            isNonEmptyString(key, 'cache_key', true);
        }, CatalystCacheError).then(function () {
            var apiUrl = "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + _this.projectId +
                (_this._segmentDetails.id === 'default'
                    ? '/cache'
                    : "/segment/" + _this._segmentDetails.id + "/cache");
            var postData = {
                cache_name: key,
                cache_value: value,
                expiry_in_hours: expiry ? expiry : null
            };
            var request = {
                method: 'PUT',
                type: 'json',
                data: postData,
                path: apiUrl
            };
            return _this.requester.send(request).then(function (resp) {
                var json = resp.data;
                return json.data;
            });
        });
    };
    Segment.prototype.getValue = function (cacheKey) {
        return this.get(cacheKey).then(function (cacheObj) {
            return cacheObj.cache_value;
        });
    };
    Segment.prototype.get = function (cacheKey) {
        var _this = this;
        return wrapValidatorsWithPromise(function () {
            isNonEmptyString(cacheKey, 'cache_key', true);
        }, CatalystCacheError).then(function () {
            var apiUrl = "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + _this.projectId +
                (_this._segmentDetails.id === 'default'
                    ? '/cache'
                    : "/segment/" + _this._segmentDetails.id + "/cache");
            var query = {
                cacheKey: cacheKey
            };
            var request = {
                method: 'GET',
                path: apiUrl,
                qs: query
            };
            return _this.requester.send(request).then(function (resp) {
                var json = resp.data;
                return json.data;
            });
        });
    };
    Segment.prototype.delete = function (cacheKey) {
        var _this = this;
        return wrapValidatorsWithPromise(function () {
            isNonEmptyString(cacheKey, 'cache_key', true);
        }, CatalystCacheError).then(function () {
            var apiUrl = "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + _this.projectId +
                (_this._segmentDetails.id === 'default'
                    ? '/cache'
                    : "/segment/" + _this._segmentDetails.id + "/cache");
            var query = {
                cacheKey: cacheKey
            };
            var request = {
                method: 'DELETE',
                path: apiUrl,
                qs: query
            };
            return _this.requester.send(request).then(function (resp) {
                var json = resp.data;
                return json.data;
            });
        });
    };
    Segment.prototype.toString = function () {
        return JSON.stringify(this._segmentDetails);
    };
    Segment.prototype.toJSON = function () {
        return this._segmentDetails;
    };
    return Segment;
}(CatalystAppInternals));
exports.Segment = Segment;
