'use strict';
var API_VERSION = require('../utils/constants').API_VERSION;
var PRODUCT_NAME = require('../utils/constants').PRODUCT_NAME;
var CatalystQueueError = require('../utils/error').CatalystQueueError;
var isValidType = require('../utils/validator').isValidType;
var Consumer = /** @class */ (function () {
    function Consumer(topic) {
        this._messagelistners = [];
        this._errorlistners = [];
        this.validEvents = ['message', 'error'];
        this._topic = topic;
        this._deleted = false;
        this.requester = topic.requester;
    }
    Consumer.prototype._startConsumerTimeout = function (delayInMillis) {
        var _this = this;
        this.consumerTimeout = setInterval(function () {
            var request = {
                method: 'GET',
                path: "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + _this._topic.projectId + "/queue/" + _this._topic._topicDetails.id + "/records"
            };
            _this.requester
                .send(request)
                .then(function (resp) {
                var json = resp.data;
                _this._messagelistners.forEach(function (listner) {
                    if (typeof listner === 'function') {
                        listner(json.data[0]);
                    }
                    else {
                        _this._messagelistners = _this._messagelistners.filter(function (other) { return other !== listner; });
                    }
                });
                return;
            })
                .then(function () {
                if (_this._deleted && (_this._deleted === true || _this._deleted === 'true')) {
                    _this._messagelistners = [];
                    _this._errorlistners = [];
                    clearInterval(_this.consumerTimeout);
                    _this.consumerTimeout = null;
                }
            })
                .catch(function (err) {
                _this._errorlistners.forEach(function (listner) {
                    if (typeof listner === 'function') {
                        listner(err);
                    }
                    else {
                        _this._errorlistners = _this._errorlistners.filter(function (other) { return other !== listner; });
                    }
                });
            });
        }, delayInMillis);
    };
    Consumer.prototype.on = function (event, listner) {
        if (!this.validEvents.includes(event)) {
            throw new CatalystQueueError('invalid-argument', 'Provided event is not valid, event must be one of ' + this.validEvents.toString(), event);
        }
        if (!isValidType(listner, 'function')) {
            throw new CatalystQueueError('invalid-argument', 'Provided listner is not valid, listner must be of type function');
        }
        if (event === 'message' && !this._messagelistners.includes(listner)) {
            this._messagelistners.push(listner);
        }
        else if (event === 'error' && !this._errorlistners.includes(listner)) {
            this._errorlistners.push(listner);
        }
        if (!this.consumerTimeout || this.consumerTimeout === null) {
            this._startConsumerTimeout(5 * 1000);
        }
        return this;
    };
    Consumer.prototype.close = function (force) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            try {
                if (force && (force === true || force === 'true')) {
                    _this._deleted = true;
                    _this._messagelistners = [];
                    _this._errorlistners = [];
                    clearInterval(_this.consumerTimeout);
                    _this.consumerTimeout = null;
                    return resolve('success');
                }
                else {
                    _this._deleted = true;
                    return resolve('success');
                }
            }
            catch (err) {
                reject(err);
            }
        });
    };
    return Consumer;
}());
exports.Consumer = Consumer;
