'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var isNonEmptyString = require('../utils/validator').isNonEmptyString;
var wrapValidatorsWithPromise = require('../utils/validator').wrapValidatorsWithPromise;
var Consumer = require('./consumer').Consumer;
var CatalystAppInternals = require('../catalyst-app').CatalystAppInternals;
var API_VERSION = require('../utils/constants').API_VERSION;
var PRODUCT_NAME = require('../utils/constants').PRODUCT_NAME;
var CatalystQueueError = require('../utils/error').CatalystQueueError;
var Topic = /** @class */ (function (_super) {
    __extends(Topic, _super);
    function Topic(topicDetails, queueInstance) {
        var _this = _super.call(this, queueInstance) || this;
        _this._topicDetails = topicDetails;
        _this.requester = queueInstance.requester;
        return _this;
    }
    Topic.prototype.produce = function (value) {
        var _this = this;
        return wrapValidatorsWithPromise(function () {
            isNonEmptyString(value, 'queue_value', true);
        }, CatalystQueueError).then(function () {
            var postData = {
                value: value
            };
            var request = {
                method: 'POST',
                type: 'json',
                data: postData,
                path: "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + _this.projectId + "/queue/" + _this._topicDetails.id
            };
            return _this.requester.send(request).then(function (resp) {
                var json = resp.data;
                return json.data;
            });
        });
    };
    Topic.prototype.consumer = function () {
        return new Consumer(this);
    };
    Topic.prototype.toString = function () {
        return JSON.stringify(this._topicDetails);
    };
    Topic.prototype.toJSON = function () {
        return this._topicDetails;
    };
    return Topic;
}(CatalystAppInternals));
exports.Topic = Topic;
