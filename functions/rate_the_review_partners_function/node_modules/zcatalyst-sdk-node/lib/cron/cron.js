'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var isValidApp = require('../utils/validator').isValidApp;
var isStringOrNumber = require('../utils/validator').isStringOrNumber;
var wrapValidatorsWithPromise = require('../utils/validator').wrapValidatorsWithPromise;
var validate = require('./cronValidator').validate;
var CatalystAppInternals = require('../catalyst-app').CatalystAppInternals;
var AuthorizedHttpClient = require('../utils/api-request').AuthorizedHttpClient;
var PRODUCT_NAME = require('../utils/constants').PRODUCT_NAME;
var API_VERSION = require('../utils/constants').API_VERSION;
var USER = require('../utils/constants').CREDENTIAL_USER;
var CatalystCronError = require('../utils/error').CatalystCronError;
var Cron = /** @class */ (function (_super) {
    __extends(Cron, _super);
    function Cron(app) {
        var _this = this;
        isValidApp(app, true);
        _this = _super.call(this, app.internal) || this;
        _super.prototype.switchUser.call(_this, USER.admin);
        _this.requester = new AuthorizedHttpClient(_this);
        return _this;
    }
    Cron.prototype.createCron = function (cron) {
        var _this = this;
        return validate(cron).then(function (validCronObj) {
            var request = {
                method: 'POST',
                path: "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + _this.projectId + "/cron",
                data: validCronObj,
                type: 'json'
            };
            return _this.requester.send(request).then(function (resp) {
                return resp.data.data;
            });
        });
    };
    Cron.prototype.getAllCron = function () {
        var request = {
            method: 'GET',
            path: "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + this.projectId + "/cron"
        };
        return this.requester.send(request).then(function (resp) {
            var json = resp.data;
            return json.data;
        });
    };
    Cron.prototype.getCronDetails = function (id) {
        var _this = this;
        return wrapValidatorsWithPromise(function () {
            isStringOrNumber(id, 'cron_id', true);
        }, CatalystCronError).then(function () {
            var request = {
                method: 'GET',
                path: "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + _this.projectId + "/cron/" + id
            };
            return _this.requester.send(request).then(function (resp) {
                var json = resp.data;
                return json.data;
            });
        });
    };
    Cron.prototype.updateCron = function (cron) {
        var _this = this;
        return wrapValidatorsWithPromise(function () {
            isStringOrNumber(cron.id, 'id in cron', true);
        }, CatalystCronError).then(function () {
            return validate(cron).then(function (validCronObj) {
                var request = {
                    method: 'PUT',
                    path: "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + _this.projectId + "/cron/" + cron.id,
                    data: validCronObj,
                    type: 'json'
                };
                return _this.requester.send(request).then(function (resp) {
                    var json = resp.data;
                    return json.data;
                });
            });
        });
    };
    Cron.prototype.deleteCron = function (id) {
        var _this = this;
        return wrapValidatorsWithPromise(function () {
            isStringOrNumber(id, 'cron_id', true);
        }, CatalystCronError).then(function () {
            var request = {
                method: 'DELETE',
                path: "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + _this.projectId + "/cron/" + id
            };
            return _this.requester.send(request).then(function () {
                return true;
            });
        });
    };
    return Cron;
}(CatalystAppInternals));
exports.Cron = Cron;
