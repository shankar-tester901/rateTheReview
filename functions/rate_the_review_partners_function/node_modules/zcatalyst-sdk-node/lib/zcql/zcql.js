'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var isValidApp = require('../utils/validator').isValidApp;
var isNonEmptyString = require('../utils/validator').isNonEmptyString;
var wrapValidatorsWithPromise = require('../utils/validator').wrapValidatorsWithPromise;
var CatalystAppInternals = require('../catalyst-app').CatalystAppInternals;
var AuthorizedHttpClient = require('../utils/api-request').AuthorizedHttpClient;
var API_VERSION = require('../utils/constants').API_VERSION;
var PRODUCT_NAME = require('../utils/constants').PRODUCT_NAME;
var CatalystZCQLError = require('../utils/error').CatalystZCQLError;
var ZCQL = /** @class */ (function (_super) {
    __extends(ZCQL, _super);
    function ZCQL(app) {
        var _this = this;
        isValidApp(app);
        _this = _super.call(this, app.internal) || this;
        // super.switchUser(USER.admin);
        _this.requester = new AuthorizedHttpClient(_this);
        return _this;
    }
    ZCQL.prototype.executeZCQLQuery = function (sql) {
        var _this = this;
        return wrapValidatorsWithPromise(function () {
            isNonEmptyString(sql, 'ZCQL/invalid-argument');
        }, CatalystZCQLError).then(function () {
            var postData = {
                query: sql
            };
            var request = {
                method: 'POST',
                path: "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + _this.projectId + "/query",
                data: postData,
                type: 'json'
            };
            return _this.requester.send(request).then(function (resp) {
                return resp.data.data;
            });
        });
    };
    return ZCQL;
}(CatalystAppInternals));
exports.ZCQL = ZCQL;
