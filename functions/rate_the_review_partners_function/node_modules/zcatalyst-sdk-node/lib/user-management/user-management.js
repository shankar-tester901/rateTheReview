'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var isValidApp = require('../utils/validator').isValidApp;
var isStringOrNumber = require('../utils/validator').isStringOrNumber;
var wrapValidatorsWithPromise = require('../utils/validator').wrapValidatorsWithPromise;
var isNonNullObject = require('../utils/validator').isNonNullObject;
var validateObject = require('../utils/validator').validateObject;
var CatalystAppInternals = require('../catalyst-app').CatalystAppInternals;
var AuthorizedHttpClient = require('../utils/api-request').AuthorizedHttpClient;
var API_VERSION = require('../utils/constants').API_VERSION;
var PRODUCT_NAME = require('../utils/constants').PRODUCT_NAME;
var USER = require('../utils/constants').CREDENTIAL_USER;
var CatalystUserManagementError = require('../utils/error').CatalystUserManagementError;
var UserManagement = /** @class */ (function (_super) {
    __extends(UserManagement, _super);
    function UserManagement(app) {
        var _this = this;
        isValidApp(app, true);
        _this = _super.call(this, app.internal) || this;
        _super.prototype.switchUser.call(_this, USER.admin);
        _this.requester = new AuthorizedHttpClient(_this);
        return _this;
    }
    UserManagement.prototype.getCurrentUser = function () {
        _super.prototype.switchUser.call(this, USER.user);
        var request = {
            method: 'GET',
            path: "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + this.projectId + "/project-user/current"
        };
        return this.requester.send(request).then(function (resp) {
            var json = resp.data;
            return json.data;
        });
    };
    UserManagement.prototype.getAllUsers = function () {
        var request = {
            method: 'GET',
            path: "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + this.projectId + "/project-user"
        };
        return this.requester.send(request).then(function (resp) {
            var json = resp.data;
            var userArr = [];
            json.data.forEach(function (user) {
                userArr.push(user);
            });
            return userArr;
        });
    };
    UserManagement.prototype.getUserDetails = function (id) {
        var _this = this;
        return wrapValidatorsWithPromise(function () {
            isStringOrNumber(id, 'user_id', true);
        }, CatalystUserManagementError).then(function () {
            var request = {
                method: 'GET',
                path: "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + _this.projectId + "/project-user/" + id
            };
            return _this.requester.send(request).then(function (resp) {
                var json = resp.data;
                return json.data;
            });
        });
    };
    UserManagement.prototype.deleteUser = function (id) {
        var _this = this;
        return wrapValidatorsWithPromise(function () {
            isStringOrNumber(id, 'user_id', true);
        }, CatalystUserManagementError).then(function () {
            var request = {
                method: 'DELETE',
                path: "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + _this.projectId + "/project-user/" + id
            };
            return _this.requester.send(request).then(function (resp) {
                var json = resp.data;
                return json.data ? true : false;
            });
        });
    };
    UserManagement.prototype.registerUser = function (signupConfig, userDetails) {
        var _this = this;
        return wrapValidatorsWithPromise(function () {
            isNonNullObject(signupConfig, 'signupConfig', true);
            validateObject(signupConfig, ['platform_type', 'zaid'], 'signupConfig', true);
            isNonNullObject(userDetails, 'userDetails', true);
            validateObject(userDetails, ['last_name', 'email_id'], 'userDetails', true);
        }, CatalystUserManagementError).then(function () {
            signupConfig.user_details = userDetails;
            var request = {
                method: 'POST',
                path: "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + _this.projectId + "/project-user/signup",
                data: signupConfig,
                type: 'json'
            };
            return _this.requester.send(request).then(function (resp) {
                var json = resp.data;
                return json.data;
            });
        });
    };
    UserManagement.prototype.addUserToOrg = function (signupConfig, userDetails) {
        var _this = this;
        return wrapValidatorsWithPromise(function () {
            isNonNullObject(signupConfig, 'signupConfig', true);
            validateObject(signupConfig, ['platform_type'], 'signupConfig', true);
            isNonNullObject(userDetails, 'userDetails', true);
            validateObject(userDetails, ['last_name', 'email_id', 'zaaid'], 'userDetails', true);
        }, CatalystUserManagementError).then(function () {
            signupConfig.user_details = userDetails;
            var request = {
                method: 'POST',
                path: "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + _this.projectId + "/project-user",
                data: signupConfig,
                type: 'json'
            };
            return _this.requester.send(request).then(function (resp) {
                var json = resp.data;
                return json.data;
            });
        });
    };
    UserManagement.prototype.resetPassword = function (signupConfig, userDetails) {
        var _this = this;
        return wrapValidatorsWithPromise(function () {
            isNonNullObject(signupConfig, 'signupConfig', true);
            validateObject(signupConfig, ['platform_type', 'zaid'], 'signupConfig', true);
            isNonNullObject(userDetails, 'userDetails', true);
            validateObject(userDetails, ['email_id'], 'userDetails', true);
        }, CatalystUserManagementError).then(function () {
            signupConfig.user_details = userDetails;
            var request = {
                method: 'POST',
                path: "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + _this.projectId + "/project-user/forgotpassword",
                data: signupConfig,
                type: 'json'
            };
            return _this.requester.send(request).then(function (resp) {
                var json = resp.data;
                return json.data;
            });
        });
    };
    return UserManagement;
}(CatalystAppInternals));
exports.UserManagement = UserManagement;
