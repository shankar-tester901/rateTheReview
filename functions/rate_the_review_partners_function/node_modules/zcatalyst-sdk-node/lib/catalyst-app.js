'use strict';
var isNonNullObject = require('./utils/validator').isNonNullObject;
var isNonEmptyString = require('./utils/validator').isNonEmptyString;
var validateObject = require('./utils/validator').validateObject;
var isValidType = require('./utils/validator').isValidType;
var CatalystAppError = require('./utils/error').CatalystAppError;
var CatalystAuthError = require('./utils/error').CatalystAuthError;
var credential = require('./auth/credential');
var constants = require('./utils/constants');
var helper = require('./utils/helper');
var CatalystAppInternals = /** @class */ (function () {
    function CatalystAppInternals(appObj) {
        this.credential = helper.copyInstance(appObj.credential);
        this.projectKey = appObj.projectKey || '';
        this.projectId = appObj.projectId;
        this.environment = appObj.environment || 'Development';
    }
    CatalystAppInternals.prototype.getUser = function () {
        if (this.credential instanceof credential.ObjectCredential) {
            return this.credential.getCurrentUser();
        }
        return constants.CREDENTIAL_USER.user;
    };
    CatalystAppInternals.prototype.switchUser = function (user) {
        if (this.credential instanceof credential.ObjectCredential) {
            return this.credential.switchUser(user);
        }
    };
    CatalystAppInternals.prototype.getCookie = function () {
        if (this.credential instanceof credential.ObjectCredential) {
            return this.credential.getCookieString();
        }
    };
    CatalystAppInternals.prototype.getToken = function () {
        var _this = this;
        var notExpired = this.credential.cachedToken &&
            this.credential.cachedToken.expirationTime &&
            (this.credential.cachedToken.expirationTime === -1 ||
                this.credential.cachedToken.expirationTime > Date.now());
        if (this.credential.cachedTokenPromise && notExpired) {
            return this.credential.cachedTokenPromise.catch(function (error) {
                if (_this.credential.cachedToken) {
                    _this.credential.cachedTokenPromise = Promise.resolve(_this.credential.cachedToken);
                    return _this.credential.cachedTokenPromise;
                }
                _this.credential.cachedTokenPromise = null;
                throw error;
            });
        }
        else {
            this.credential.cachedTokenPromise = this.credential.getAccessToken().then(function (result) {
                if (result === null) {
                    return null;
                }
                if (!isNonNullObject(result)) {
                    throw new CatalystAuthError('invalid_credential', 'Unknown result while retriving access token.', result);
                }
                var token;
                if (isNonEmptyString(result.ticket)) {
                    token = {
                        ticket: result.ticket,
                        expirationTime: -1,
                        header: 'Zoho-ticket ' + result.ticket
                    };
                }
                else if (isNonEmptyString(result.access_token)) {
                    token = {
                        accessToken: result.access_token,
                        expirationTime: result.expires_in ? Date.now() + result.expires_in : null,
                        header: 'Zoho-oauthtoken ' + result.access_token
                    };
                }
                else {
                    throw new CatalystAuthError('invalid_credential', 'access_token could not be generated.', result);
                }
                _this.credential.cachedToken = token;
                return token;
            });
            return this.credential.cachedTokenPromise;
        }
    };
    return CatalystAppInternals;
}());
exports.CatalystAppInternals = CatalystAppInternals;
var CatalystApp = /** @class */ (function () {
    function CatalystApp(options, type) {
        this.options = options;
        this.type = type;
        this.services = {};
        this.internal = {};
        try {
            isNonNullObject(this.options, 'options', true);
            validateObject(this.options, ['credential'], 'options', true);
            isNonNullObject(this.options.credential, 'options.credential', true);
            isValidType(this.options.credential.getAccessToken, 'function', 'options.credential', true);
        }
        catch (e) {
            throw new CatalystAppError(e.code, e.message, e);
        }
        this.internal.projectId = options.project_id || options.projectId;
        this.internal.projectKey = options.project_key || options.projectKey;
        this.internal.environment = options.environment;
        this.internal.credential = options.credential;
    }
    CatalystApp.prototype.cache = function () {
        var _this = this;
        return this.ensureService('cache', function () {
            var cacheService = require('./cache/cache').Cache;
            return new cacheService(_this);
        });
    };
    CatalystApp.prototype.queue = function () {
        var _this = this;
        return this.ensureService('queue', function () {
            var queueService = require('./queue/queue').Queue;
            return new queueService(_this);
        });
    };
    CatalystApp.prototype.cron = function () {
        var _this = this;
        return this.ensureService('cron', function () {
            var cronService = require('./cron/cron').Cron;
            return new cronService(_this);
        });
    };
    CatalystApp.prototype.datastore = function () {
        var _this = this;
        return this.ensureService('datastore', function () {
            var dataService = require('./datastore/datastore').Datastore;
            return new dataService(_this);
        });
    };
    CatalystApp.prototype.filestore = function () {
        var _this = this;
        return this.ensureService('file', function () {
            var fileService = require('./file/filestore').Filestore;
            return new fileService(_this);
        });
    };
    CatalystApp.prototype.zcql = function () {
        var _this = this;
        return this.ensureService('zcql', function () {
            var zcqlService = require('./zcql/zcql').ZCQL;
            return new zcqlService(_this);
        });
    };
    CatalystApp.prototype.email = function () {
        var _this = this;
        return this.ensureService('mail', function () {
            var mailService = require('./email/email').Email;
            return new mailService(_this);
        });
    };
    CatalystApp.prototype.search = function () {
        var _this = this;
        return this.ensureService('search', function () {
            var searchService = require('./search/search').Search;
            return new searchService(_this);
        });
    };
    CatalystApp.prototype.gql = function () {
        var _this = this;
        return this.ensureService('gql', function () {
            var gqlService = require('./gql/gql').GQL;
            return new gqlService(_this);
        });
    };
    CatalystApp.prototype.functions = function () {
        var _this = this;
        return this.ensureService('functions', function () {
            var funcService = require('./functions/functions').Functions;
            return new funcService(_this);
        });
    };
    CatalystApp.prototype.userManagement = function () {
        var _this = this;
        return this.ensureService('userManagement', function () {
            var authService = require('./user-management/user-management').UserManagement;
            return new authService(_this);
        });
    };
    CatalystApp.prototype.pushNotification = function () {
        var _this = this;
        return this.ensureService('pushNotification', function () {
            var pushService = require('./push-notification/push-notification').PushNotification;
            return new pushService(_this);
        });
    };
    CatalystApp.prototype.zia = function () {
        var _this = this;
        return this.ensureService('zia', function () {
            var ziaService = require('./zia/zia').Zia;
            return new ziaService(_this);
        });
    };
    CatalystApp.prototype.connection = function (prop) {
        var _this = this;
        return this.ensureService('connection', function () {
            var connectorService = require('./connector/connection').Connection;
            return new connectorService(_this, prop);
        });
    };
    CatalystApp.prototype.ensureService = function (serviceName, initializer) {
        var service;
        if (serviceName in this.services) {
            service = this.services[serviceName];
        }
        else {
            service = initializer();
            this.services[serviceName] = service;
        }
        return service;
    };
    return CatalystApp;
}());
exports.CatalystApp = CatalystApp;
