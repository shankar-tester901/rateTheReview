'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var isValidApp = require('../utils/validator').isValidApp;
var isNonEmptyString = require('../utils/validator').isNonEmptyString;
var isStringOrNumber = require('../utils/validator').isStringOrNumber;
var wrapValidatorsWithPromise = require('../utils/validator').wrapValidatorsWithPromise;
var USER = require('../utils/constants').CREDENTIAL_USER;
var Folder = require('./folder').Folder;
var CatalystAppInternals = require('../catalyst-app').CatalystAppInternals;
var AuthorizedHttpClient = require('../utils/api-request').AuthorizedHttpClient;
var API_VERSION = require('../utils/constants').API_VERSION;
var PRODUCT_NAME = require('../utils/constants').PRODUCT_NAME;
var CatalystFilestoreError = require('../utils/error').CatalystFilestoreError;
var Filestore = /** @class */ (function (_super) {
    __extends(Filestore, _super);
    function Filestore(app) {
        var _this = this;
        isValidApp(app, true);
        _this = _super.call(this, app.internal) || this;
        _this.requester = new AuthorizedHttpClient(_this);
        return _this;
    }
    Filestore.prototype.createFolder = function (name) {
        var _this = this;
        this.switchUser(USER.admin);
        return wrapValidatorsWithPromise(function () {
            isNonEmptyString(name, 'folder_name', true);
        }, CatalystFilestoreError).then(function () {
            var postData = {
                folder_name: name
            };
            var request = {
                method: 'POST',
                path: "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + _this.projectId + "/folder",
                data: postData,
                type: 'json'
            };
            return _this.requester.send(request).then(function (resp) {
                var json = resp.data;
                return new Folder(json.data, _this);
            });
        });
    };
    Filestore.prototype.getAllFolders = function () {
        var _this = this;
        this.switchUser(USER.admin);
        var request = {
            method: 'GET',
            path: "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + this.projectId + "/folder"
        };
        return this.requester.send(request).then(function (resp) {
            var json = resp.data;
            var folderArr = [];
            json.data.forEach(function (folder) {
                folderArr.push(new Folder(folder, _this));
            });
            return folderArr;
        });
    };
    Filestore.prototype.getFolderDetails = function (id) {
        var _this = this;
        this.switchUser(USER.admin);
        return wrapValidatorsWithPromise(function () {
            isStringOrNumber(id, 'folder_id', true);
        }, CatalystFilestoreError).then(function () {
            var request = {
                method: 'GET',
                path: "/" + PRODUCT_NAME + "/" + API_VERSION + "/project/" + _this.projectId + "/folder/" + id
            };
            return _this.requester.send(request).then(function (resp) {
                var json = resp.data;
                return new Folder(json.data, _this);
            });
        });
    };
    Filestore.prototype.folder = function (id) {
        if (!isStringOrNumber(id)) {
            throw new CatalystFilestoreError('invalid-argument', 'Value provided for folder_id must be a non empty String or Number.', id);
        }
        return new Folder({ id: id }, this);
    };
    return Filestore;
}(CatalystAppInternals));
exports.Filestore = Filestore;
