'use strict';
var readFileSync = require('fs').readFileSync;
var credential = require('./auth/credential');
var CatalystAppError = require('./utils/error').CatalystAppError;
var CatalystApp = require('./catalyst-app').CatalystApp;
var isNonEmpty = require('./utils/validator').isNonEmpty;
var isNonNullObject = require('./utils/validator').isNonNullObject;
var isStringOrNumber = require('./utils/validator').isStringOrNumber;
var isNonEmptyString = require('./utils/validator').isNonEmptyString;
var constants = require('./utils/constants');
var catalystCredential = {
    refreshToken: function (refreshTokenObj) {
        return new credential.RefreshTokenCredential(refreshTokenObj);
    },
    accessToken: function (accessToken) {
        return new credential.AccessTokenCredential({ access_token: accessToken });
    },
    ticket: function (ticket) {
        return new credential.TicketCredential({ ticket: ticket });
    }
};
var CatalystNamespace = /** @class */ (function () {
    function CatalystNamespace() {
        this.credential = catalystCredential;
        this.user = constants.CREDENTIAL_USER;
        this.type = constants.INIT_TYPE;
        this.project = {};
    }
    CatalystNamespace.prototype.initializeApp = function (options, projectName) {
        if (typeof projectName === 'undefined') {
            projectName = constants.DEFAULT_APP_NAME;
        }
        if (projectName in this.project) {
            throw new CatalystAppError('duplicate_app', 'The app already exists.', projectName);
        }
        if (!isNonNullObject(options)) {
            options = this.loadOptionsFromEnvVar();
            if (!isNonEmpty(options)) {
                throw new CatalystAppError('invalid_app_options', 'Options provided for initializeApp in invalid.', options);
            }
        }
        // credential alone can be not given
        if (typeof options.credential === 'undefined') {
            options.credential = new credential.ApplicationDefaultCredential();
        }
        try {
            isStringOrNumber(options.project_id, 'project_id in options', true);
            isStringOrNumber(options.project_key, 'project_key in options', true);
            isStringOrNumber(options.environment, 'environment in options', true);
            isNonEmptyString(projectName, 'projectName', true);
        }
        catch (e) {
            throw new CatalystAppError(e.code, e.message, e);
        }
        var app = new CatalystApp(options);
        this.project[projectName] = app;
        return app;
    };
    CatalystNamespace.prototype.initialize = function (object, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.defaultUser, defaultUser = _c === void 0 ? constants.CREDENTIAL_USER.user : _c, type = _b.type;
        var appOptions = {};
        switch (type) {
            case constants.INIT_TYPE.advancedio:
                if (!object || typeof object.headers !== 'object') {
                    throw new CatalystAppError('invalid_app_object', 'the object passed to initialize method is not valid', object);
                }
                appOptions = this.loadOptionsFromObj(object, 'headers');
                appOptions.credential = new credential.ObjectCredential(object, 'headers', defaultUser);
                break;
            case constants.INIT_TYPE.basicio:
                if (!object || typeof object.catalystHeaders !== 'object') {
                    throw new CatalystAppError('invalid_app_object', 'the object passed to initialize method is not valid', object);
                }
                appOptions = this.loadOptionsFromObj(object, 'catalystHeaders');
                appOptions.credential = new credential.ObjectCredential(object, 'catalystHeaders', defaultUser);
                break;
            default:
                if (object && typeof object.headers === 'object') {
                    return this.initialize(object, {
                        defaultUser: defaultUser,
                        type: constants.INIT_TYPE.advancedio
                    });
                }
                if (object && typeof object.catalystHeaders === 'object') {
                    return this.initialize(object, {
                        defaultUser: defaultUser,
                        type: constants.INIT_TYPE.basicio
                    });
                }
                throw new CatalystAppError('invalid_app_object', 'unable to find the type of initialisation. kindly specify one', object);
        }
        return new CatalystApp(appOptions, type);
    };
    CatalystNamespace.prototype.loadOptionsFromObj = function (obj, key) {
        var projectId = obj[key][constants.PROJECT_HEADER.id];
        var projectKey = obj[key][constants.PROJECT_HEADER.key];
        var environment = obj[key][constants.PROJECT_HEADER.environment];
        var projectDomain = obj[key][constants.PROJECT_HEADER.domain] || 'catalyst.zoho.com';
        if (!projectKey || !projectId) {
            throw new CatalystAppError('invalid_project_details', 'Failed to parse object', obj);
        }
        return {
            projectId: projectId,
            projectKey: projectKey,
            environment: environment,
            projectDomain: projectDomain
        };
    };
    CatalystNamespace.prototype.loadOptionsFromEnvVar = function () {
        var config = process.env[constants.CATALYST_CONFIG_ENV_KEY];
        if (!isNonEmptyString(config)) {
            return {};
        }
        try {
            var contents = config.startsWith('{') ? config : readFileSync(config, 'utf8');
            return JSON.parse(contents);
        }
        catch (err) {
            // Throw a nicely formed error message if the file contents cannot be parsed
            throw new CatalystAppError('invalid_app_options', 'Failed to parse app options : ' + err, err);
        }
    };
    CatalystNamespace.prototype.app = function (projectName) {
        if (typeof projectName === 'undefined') {
            projectName = constants.DEFAULT_APP_NAME;
        }
        if (!isNonEmptyString(projectName)) {
            throw new CatalystAppError('invalid_app_name', 'Invalid app name provided. App name must be a non-empty string.', projectName);
        }
        else if (!(projectName in this.project)) {
            var errorMessage = projectName === constants.DEFAULT_APP_NAME
                ? 'The default project does not exist. '
                : "project named \"" + projectName + "\" does not exist. ";
            errorMessage += 'Make sure you call initializeApp() before getting the desired app';
            throw new CatalystAppError('no_app', errorMessage, projectName);
        }
        return this.project[projectName];
    };
    return CatalystNamespace;
}());
module.exports = CatalystNamespace;
